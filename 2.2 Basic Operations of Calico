Step 1 View basic information about Calico.
Run the following command to view the resource object ippool related to Calico:
[root@master01 ~]# kubectl get ippool
Run the following command to view the details about ippool:
[root@master01 ~]# kubectl get ippool default-ipv4-ippool -o yaml


Step 2 Capture packets to check the data packet forwarding path.
Run the ping pod busybox-9dc75d45c-6dlw7 command on the k8smaster1 node and
run the following command on the pod node to capture packets (install the tcpdump
utility by yourself):
[root@node1 ~]# tcpdump -i eth0 -nn ip host 192.168.1.15 and host 192.168.1.11
dropped privs to tcpdump
tcpdump: verbose output suppressed, use -v[v]... for full protocol decode
listening on ens192, link-type EN10MB (Ethernet), snapshot length 262144 bytes
09:54:36.138722 IP 192.168.1.11 > 192.168.1.15: IP 10.239.112.128 > 10.31.185.193: ICMP echo
request, id 5902, seq 5, length 64
09:54:36.138811 IP 192.168.1.15 > 192.168.1.11: IP 10.31.185.193 > 10.239.112.128: ICMP echo reply,
id 5902, seq 5, length 64
09:54:37.162851 IP 192.168.1.11 > 192.168.1.15: IP 10.239.112.128 > 10.31.185.193: ICMP echo
request, id 5902, seq 6, length 64
09:54:37.162951 IP 192.168.1.15 > 192.168.1.11: IP 10.31.185.193 > 10.239.112.128: ICMP echo reply,
id 5902, seq 6, length 64
09:54:38.186733 IP 192.168.1.11 > 192.168.1.15: IP 10.239.112.128 > 10.31.185.193: ICMP echo
request, id 5902, seq 7, length 64
09:54:38.186826 IP 192.168.1.15 > 192.168.1.11: IP 10.31.185.193 > 10.239.112.128: ICMP echo reply,
id 5902, seq 7, length 64
⚫ Question: What conclusion can you draw from the captured packets?
⚫ Answer: In IP-in-IP (IPIP) mode, data packets are encapsulated on the host network
and then routed. After reaching the destination node, the data packets are
decapsulated and then forwarded to the corresponding pod.


Step 3 Use the calicoctl tool.
Run the following command on the k8smaster1 node and view the Calico version:
[root@k8smaster1 ~]# kubectl describe deployment calico-kube-controllers -n kube-system


Step 4 Install calicoctl.
Download the calicoctl whose version is the same as the Calico version and copy it to the
/usr/local/bin directory.
[root@k8smaster1 ~]# git clone https://gitee.com/yftyxa/hcie-calicoctl.git
[root@k8smaster1 ~]# cd hcie-calicoctl
[root@k8smaster1 ~]# cp calicoctl /usr/local/bin/

Add the execute permission.
[root@k8smaster1 ~]# chmod +x /usr/local/bin/calicoctl
View the version.
[root@k8smaster1 ~]# calicoctl version



Step 5 View node information.
[root@k8smaster1 ~]# calicoctl get node
You can see that Calico is installed on each Kubernetes node.


Step 6 View the current IP address pool.
[root@k8smaster1 ~]# calicoctl get ippool
The default IP address pool is the CIDR network segment configured during Kubernetes
installation.


Step 7 View the current network mode.
[root@k8smaster1 ~]# calicoctl get ippool -o wide
The current network mode is IPIP.


Step 8 Check the current node status.
[root@k8smaster1 ~]# calicoctl node status
node-to-node mesh indicates that Calico uses the BGP full-mesh mode by default.

Step 9 View node connection information.
[root@k8smaster1 ~]# netstat -anp | grep ESTABLISH | grep bird
The Kubernetes cluster has six nodes. Therefore, five connections can be queried on each
node, indicating that every two nodes are connected.


Step 10 View IP address pool details.
[root@k8smaster1 ~]# kubectl describe ippools
You can use kubectl to view details about the IP address pool, including the IP address
range and Calico mode.














